@page "/Account/Manage"
@using Microsoft.AspNetCore.Identity
@using QazaqGeoReports.Domain.Entities
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Components.Authorization

@inject UserManager<User> UserManager
@inject IdentityUserAccessor UserAccessor

<PageTitle>Profile</PageTitle>

<h3 class="mb-3">Профиль</h3>
<StatusMessage />

@if (isLoading)
{
    <div class="d-flex align-items-center justify-content-center py-5">
        <div class="spinner-border" role="status" aria-hidden="true"></div>
        <span class="ms-3">Загружаем профиль…</span>
    </div>
}
else
{
    <div class="row g-4">
        <!-- Левая колонка: карточка профиля -->
        <div class="col-12 col-xl-6">
            <div class="card shadow-sm border-0">
                <div class="card-body p-4 d-flex gap-3 align-items-center">
                    <div class="avatar bg-primary text-white d-flex align-items-center justify-content-center rounded-circle"
                         style="width:72px;height:72px;font-weight:700;font-size:1.25rem;">
                        @initials
                    </div>
                    <div class="flex-grow-1">
                        <h4 class="mb-1">@displayName</h4>
                        <div class="text-muted small mb-1">Имя пользователя: <code>@userName</code></div>
                        <div class="d-flex flex-wrap gap-2">
                            <span class="badge @(emailConfirmed ? "bg-success" : "bg-secondary")">
                                @(emailConfirmed ? "Email подтверждён" : "Email не подтверждён")
                            </span>
                            @if (phoneNumber is not null)
                            {
                                <span class="badge bg-light text-dark">Телефон указан</span>
                            }
                            <span class="badge @(twoFactorEnabled ? "bg-info" : "bg-light text-dark")">
                                2FA @(twoFactorEnabled ? "включена" : "выключена")
                            </span>
                        </div>
                    </div>
                </div>
                <div class="list-group list-group-flush">
                    <div class="list-group-item">
                        <div class="small text-muted">Email</div>
                        <div>@(email ?? "—")</div>
                    </div>
                    <div class="list-group-item">
                        <div class="small text-muted">Телефон</div>
                        <div>@(phoneNumber ?? "—")</div>
                    </div>
                    <div class="list-group-item">
                        <div class="small text-muted">Роли</div>
                        <div>@(roles?.Any() == true ? string.Join(", ", roles) : "—")</div>
                    </div>
                    <div class="list-group-item">
                        <div class="small text-muted">Создан</div>
                        <div>@(createdTime?.ToString("yyyy-MM-dd HH:mm") ?? "—")</div>
                    </div>
                    <div class="list-group-item">
                        <div class="small text-muted">Обновлён</div>
                        <div>@(updatedTime?.ToString("yyyy-MM-dd HH:mm") ?? "—")</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Правая колонка: безопасность/навигация -->
        <div class="col-12 col-xl-6">
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-body p-4">
                    <h4 class="card-title mb-2">Безопасность *в разработке</h4>
                    <p class="text-muted mb-3">Управляй входом и безопасностью аккаунта.</p>

                    <div class="d-grid gap-2">
                        <a class="btn btn-outline-primary" href="/Account/Manage/Email">Изменить email</a>
                        <a class="btn btn-outline-primary" href="/Account/Manage/Password">Сменить пароль</a>
                    </div>

                    <hr class="my-4" />

                    <ul class="list-unstyled mb-0">
                        <li class="mb-2">
                            <span class="text-muted small d-block">Двухфакторная аутентификация</span>
                            <strong>@(twoFactorEnabled ? "Включена" : "Выключена")</strong>
                        </li>
                        <li class="mb-2">
                            <span class="text-muted small d-block">Lockout</span>
                            <strong>@(lockoutEnabled ? "Включён" : "Выключен")</strong>
                        </li>
                        <li class="mb-0">
                            <span class="text-muted small d-block">Email подтверждение</span>
                            <strong>@(emailConfirmed ? "Подтверждён" : "Не подтверждён")</strong>
                        </li>
                    </ul>
                </div>
            </div>

            <div class="card shadow-sm border-0">
                <div class="card-body p-4">
                    <h5 class="card-title mb-2">Системная информация</h5>
                    <div class="small text-muted mb-1">ID пользователя</div>
                    <code class="text-break">@user?.Id</code>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    private User? user;
    private bool isLoading = true;

    // Основные поля
    private string? userName;
    private string? displayName;
    private string? email;
    private bool emailConfirmed;
    private string? phoneNumber;
    private bool twoFactorEnabled;
    private bool lockoutEnabled;
    private string initials = "U";
    private IList<string>? roles;

    private DateTime? createdTime;
    private DateTime? updatedTime;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        userName = await UserManager.GetUserNameAsync(user);
        email = await UserManager.GetEmailAsync(user);
        emailConfirmed = await UserManager.IsEmailConfirmedAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        twoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        lockoutEnabled = await UserManager.GetLockoutEnabledAsync(user);
        roles = await UserManager.GetRolesAsync(user);

        displayName = BuildDisplayName(user);
        initials = BuildInitials(displayName ?? userName ?? "U");

        createdTime = user.CreatedTime == default ? null : user.CreatedTime;
        updatedTime = user.UpdatedTime == default ? null : user.UpdatedTime;

        isLoading = false;
    }

    private static string BuildDisplayName(User u)
    {
        var parts = new[] { u.LastName, u.FirstName, u.MiddleName }
                    .Where(s => !string.IsNullOrWhiteSpace(s));
        var full = string.Join(' ', parts);
        return string.IsNullOrWhiteSpace(full) ? (u.UserName ?? u.Email ?? "Пользователь") : full;
    }

    private static string BuildInitials(string name)
    {
        var tokens = name.Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        if (tokens.Length == 0) return "U";
        if (tokens.Length == 1) return tokens[0].Substring(0, Math.Min(2, tokens[0].Length)).ToUpperInvariant();
        return (tokens[0][0].ToString() + tokens[^1][0].ToString()).ToUpperInvariant();
    }
}
