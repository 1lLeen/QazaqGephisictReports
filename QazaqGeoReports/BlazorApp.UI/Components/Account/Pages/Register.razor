@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using QazaqGeoReports.Domain.Entities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject IEmailSender<User> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject QazaqGeoReports.Infrastructure.QazaqGeoReportContext DbContext

<PageTitle>Register</PageTitle>

<h1>Регистрация</h1>

<div class="row">
    <div class="col-lg-6">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Создания нового пользователя</h2>
            <hr />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" id="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="Имя" />
                <label for="Input.FirstName">FirstName</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" id="Input.LastName" class="form-control" autocomplete="lastname" aria-required="true" placeholder="Фамилия" />
                <label for="Input.LastName">LastName</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.MiddleName" id="Input.MiddleName" class="form-control" autocomplete="middlename" aria-required="true" placeholder="Отчество" />
                <label for="Input.MiddleName">MiddleName</label>
                <ValidationMessage For="() => Input.MiddleName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="example@mail.ru" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" id="Input.PhoneNumber" class="form-control" autocomplete="phonenumber" aria-required="true" placeholder="877775551122" />
                <label for="Input.PhoneNumber">PhoneNumber</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Role" id="Input.Role" class="form-control form-select" autocomplete="role" aria-required="true" placeholder="">
                    <option value="none">None</option>
                    @foreach (var item in Enum.GetNames(typeof(QazaqGeoReports.Domain.Common.Roles)))
                    {
                        <option class="" value="@item">@item</option>
                    }
                </InputSelect>
                <label for="Input.Role">Role</label>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Пароль" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Подврждение пароля" />
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>


            <ValidationSummary class="text-danger" role="alert" />
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        var role = DbContext.Roles.FirstOrDefault(x => x.Name == Input.Role);

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        //Hand data
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.MiddleName = Input.MiddleName;
        user.PhoneNumber = Input.PhoneNumber;
        user.Email = Input.Email;
        user.EmailConfirmed = true;
        user.PhoneNumberConfirmed = true;

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        await UserManager.AddToRoleAsync(user, Input.Role);
        await SignInManager.SignInAsync(user, isPersistent: false);

        await SignInManager.UserManager.SetLockoutEnabledAsync(user, false);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        } 

        var userId = await UserManager.GetUserIdAsync(user);

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
        // var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //     new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/RegisterConfirmation",
        //         new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        // }

    }

    private User CreateUser()
    {
        try
        {
            return Activator.CreateInstance<User>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(User)}'. " +
                $"Ensure that '{nameof(User)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<User> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<User>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, MinimumLength = 3)]
        [Display(Name = "FirstName")]
        public string FirstName { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 3)]
        [Display(Name = "LastName")]
        public string LastName { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 3)]
        [Display(Name = "MiddleName")]
        public string MiddleName { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 3)]
        [DataType(DataType.PhoneNumber)]
        [Display(Name = "PhoneNumber")]
        public string PhoneNumber { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 3)]
        [DataType(DataType.PhoneNumber)]
        [Display(Name = "Role")]
        public string Role { get; set; } = "";


        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
