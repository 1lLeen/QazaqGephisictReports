@page "/"

@using System.Security.Claims
@using QazaqGeoReports.Domain.Entities
@using QazaqGeoReports.Domain.Interfaces.Services

@inject IUserService UserService
@inject IReportService ReportService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Главная</PageTitle>

<div class="container py-4">

    <div class="d-flex align-items-center justify-content-between flex-wrap gap-3 mb-3">
        <h2 class="mb-0">👨‍💼 Сотрудники компании</h2>
        <div class="d-flex align-items-center gap-2 text-muted">
            <span class="badge bg-light text-dark">Всего: @filtered.Count()</span>
            <span class="badge bg-light text-dark">С отчётами: @filtered.Count(u => u.ReportCount > 0)</span>
        </div>
    </div>

    <!-- Панель фильтров -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-12 col-md-6">
                    <label class="form-label">Поиск</label>
                    <input class="form-control"
                           placeholder="Имя, email или телефон…"
                           @bind="Search"
                           @bind:event="oninput" />
                </div>

                <div class="col-6 col-md-3">
                    <label class="form-label">Сортировка</label>
                    <select class="form-select" @bind="SortOption">
                        <option value="name_asc">Имя A→Z</option>
                        <option value="name_desc">Имя Z→A</option>
                        <option value="reports_desc">Отчётов ↓</option>
                        <option value="reports_asc">Отчётов ↑</option>
                    </select>
                </div>

                <div class="col-6 col-md-2">
                    <label class="form-label">На страницу</label>
                    <select class="form-select" @bind="PageSize">
                        <option value="8">8</option>
                        <option value="12">12</option>
                        <option value="24">24</option>
                    </select>
                </div>

                <div class="col-12 col-md-1 d-flex align-items-end">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="onlyWithReports" @bind="OnlyWithReports" />
                        <label class="form-check-label small" for="onlyWithReports">
                            Только с отчётами
                        </label>
                    </div>
                </div>

            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Загрузка…</span>
            </div>
        </div>
    }
    else if (!filtered.Any())
    {
        <div class="alert alert-warning text-center">Сотрудников по фильтрам не найдено.</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
            @foreach (var u in paged)
            {
                <div class="col">
                    <div class="card h-100 employee-card shadow-sm border-0">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-center gap-3 mb-3">
                                <div class="avatar-circle" title="@u.User.FullName">
                                    @GetInitials(u.User.FullName)
                                </div>
                                <div class="flex-grow-1">
                                    <h5 class="card-title mb-0 text-truncate" title="@u.User.FullName">
                                        @(string.IsNullOrWhiteSpace(u.User.FullName) ? "(Без имени)" : u.User.FullName)
                                    </h5>
                                    @if (!string.IsNullOrWhiteSpace(u.Role))
                                    {
                                        <span class="badge role-badge mt-1">@u.Role</span>
                                    }
                                </div>
                            </div>

                            <div class="small text-muted mb-2">
                                <div class="d-flex align-items-center gap-2">
                                    <i class="bi bi-envelope"></i>
                                    <a class="link-underline-opacity-0" href="@($"mailto:{u.User.Email}")">@u.User.Email</a>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(u.User.PhoneNumber))
                                {
                                    <div class="d-flex align-items-center gap-2 mt-1">
                                        <i class="bi bi-telephone"></i>
                                        <a class="link-underline-opacity-0" href="@($"tel:{u.User.PhoneNumber}")">@u.User.PhoneNumber</a>
                                    </div>
                                }
                            </div>

                            <div class="mt-auto d-flex align-items-center justify-content-between">
                                <span class="badge count-badge" title="Количество отчётов">📄 @u.ReportCount</span>
                                <div class="btn-group">
                                    <a class="btn btn-sm btn-outline-primary"
                                       href="@($"/Report/AllReports?userId={Uri.EscapeDataString(u.User.Id)}")"
                                       title="Показать отчёты пользователя">
                                        Отчёты
                                    </a>
                                    <a class="btn btn-sm btn-primary"
                                       href="@($"/User/Details/{Uri.EscapeDataString(u.User.Id)}")"
                                       title="Профиль сотрудника">
                                        Профиль
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Пагинация -->
        <nav class="d-flex justify-content-between align-items-center mt-4">
            <div class="text-muted small">
                Показаны @(startIndex + 1)–@Math.Min(startIndex + paged.Count, filtered.Count()) из @filtered.Count()
            </div>
            <ul class="pagination mb-0">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="(() => GoToPage(1))" aria-label="First">«</button>
                </li>
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="(() => GoToPage(currentPage - 1))" aria-label="Previous">‹</button>
                </li>
                @foreach (var p in VisiblePages())
                {
                    <li class="page-item @(p == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="(() => GoToPage(p))">@p</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="(() => GoToPage(currentPage + 1))" aria-label="Next">›</button>
                </li>
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="(() => GoToPage(totalPages))" aria-label="Last">»</button>
                </li>
            </ul>
        </nav>
    }
    <style>
        .employee-card {
            transition: transform .12s ease, box-shadow .12s ease;
        }

            .employee-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 24px rgba(0,0,0,.08);
            }

        .avatar-circle {
            width: 54px;
            height: 54px;
            border-radius: 50%;
            display: grid;
            place-items: center;
            font-weight: 700;
            background: linear-gradient(145deg, #eef3ff, #e8f7ff);
            border: 1px solid #e5eefc;
            color: #3b5bdb;
        }

        .role-badge {
            background: #f1f3ff;
            color: #3d3df5;
            border: 1px solid #e5e7ff;
            font-weight: 600;
        }

        .count-badge {
            background: #f6f7f9;
            border: 1px solid #e9ecef;
            color: #495057;
            font-weight: 600;
        }

    </style>
</div>

@code {
    private bool isLoading = true;

    private List<User> users = new();
    private List<UserViewModel> userViews = new();

    // Фильтры/сортировка/страницы
    private string? search;
    private bool onlyWithReports = false;
    private string sortOption = "name_asc";
    private int pageSize = 12;
    private int currentPage = 1;
    private int totalPages = 1;
    private int startIndex => (currentPage - 1) * pageSize;

    private IEnumerable<UserViewModel> filtered => _filtered ?? Enumerable.Empty<UserViewModel>();
    private List<UserViewModel> paged = new();
    private IEnumerable<UserViewModel>? _filtered;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        users = await UserService.GetAllAsync();

        // Подготовка вью-моделей + подсчёт отчётов
        userViews = new List<UserViewModel>(users.Count);
        foreach (var u in users)
        {
            var reports = await ReportService.GetReportsByUserAsync(u.Id);
            userViews.Add(new UserViewModel
            {
                User = u,
                // Если вашей модели User нет поля роли, оставь пусто — бейдж просто не покажется:
                Role = TryGetRole(u),
                ReportCount = reports?.Count ?? 0
            });
        }

        ApplyFilters();
        isLoading = false;
    }

    private void ApplyFilters()
    {
        IEnumerable<UserViewModel> q = userViews;

        if (!string.IsNullOrWhiteSpace(search))
        {
            var s = search.Trim();
            q = q.Where(x =>
                (x.User.FullName ?? "").Contains(s, StringComparison.CurrentCultureIgnoreCase) ||
                (x.User.Email ?? "").Contains(s, StringComparison.CurrentCultureIgnoreCase) ||
                (x.User.PhoneNumber ?? "").Contains(s, StringComparison.CurrentCultureIgnoreCase));
        }

        if (onlyWithReports)
            q = q.Where(x => x.ReportCount > 0);

        q = sortOption switch
        {
            "name_desc" => q.OrderByDescending(x => x.User.FullName ?? string.Empty, StringComparer.CurrentCultureIgnoreCase),
            "reports_desc" => q.OrderByDescending(x => x.ReportCount)
                               .ThenBy(x => x.User.FullName ?? string.Empty, StringComparer.CurrentCultureIgnoreCase),
            "reports_asc" => q.OrderBy(x => x.ReportCount)
                               .ThenBy(x => x.User.FullName ?? string.Empty, StringComparer.CurrentCultureIgnoreCase),
            _ => q.OrderBy(x => x.User.FullName ?? string.Empty, StringComparer.CurrentCultureIgnoreCase),
        };

        _filtered = q.ToList();

        totalPages = Math.Max(1, (int)Math.Ceiling((double)filtered.Count() / pageSize));
        currentPage = Math.Clamp(currentPage, 1, totalPages);

        paged = filtered.Skip(startIndex).Take(pageSize).ToList();
        StateHasChanged();
    }

    private void GoToPage(int page)
    {
        currentPage = Math.Clamp(page, 1, totalPages);
        paged = filtered.Skip(startIndex).Take(pageSize).ToList();
    }

    private IEnumerable<int> VisiblePages()
    {
        const int window = 5;
        var start = Math.Max(1, currentPage - 2);
        var end = Math.Min(totalPages, start + window - 1);
        if (end - start + 1 < window)
            start = Math.Max(1, end - window + 1);
        return Enumerable.Range(start, end - start + 1);
    }

    private string GetInitials(string? fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName)) return "👤";
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        if (parts.Length == 1) return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpperInvariant();
        return (parts[0][0].ToString() + parts[^1][0].ToString()).ToUpperInvariant();
    }

    private string? TryGetRole(User u)
    {
        // Если у твоей модели User есть свойство Role (enum/string), распакуем красиво:
        // Попробуем безопасно, без compile-time зависимости:
        var prop = u.GetType().GetProperty("Role");
        var value = prop?.GetValue(u)?.ToString();
        return string.IsNullOrWhiteSpace(value) ? null : value;
    }

    private class UserViewModel
    {
        public User User { get; set; } = default!;
        public string? Role { get; set; }
        public int ReportCount { get; set; }
    }

    // Реакция на изменения контролов
    private string SortOption { get => sortOption; set { sortOption = value; ApplyFilters(); } }
    private string Search { get => search ?? ""; set { search = value; ApplyFilters(); } }
    private bool OnlyWithReports { get => onlyWithReports; set { onlyWithReports = value; ApplyFilters(); } }
    private int PageSize { get => pageSize; set { pageSize = value; currentPage = 1; ApplyFilters(); } }
}
