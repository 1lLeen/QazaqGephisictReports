name: qgreports

services:
  db:
    image: postgres:16
    container_name: qgreports-db
    environment:
      POSTGRES_DB: geo_db
      POSTGRES_USER: geo_user
      POSTGRES_PASSWORD: geo_password
    ports:
      - "5433:5432"                 # внешний порт хоста (оставил 5433, чтобы не биться с локальным 5432)
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: ./BlazorApp.UI/Dockerfile   # если Dockerfile в корне — укажи просто Dockerfile
    container_name: qgreports-app
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      ASPNETCORE_URLS: "http://0.0.0.0:8080"
      # строка подключения в КОНТЕЙНЕРЕ — хостом будет имя сервиса db
      ASPNETCORE_ConnectionStrings__DefaultConnection: >
        Host=db;Port=5432;Database=geo_db;Username=geo_user;Password=geo_password;
        SSL Mode=Disable;Trust Server Certificate=true
    ports:
      - "8080:8080"                 # внешний порт твоего приложения
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # опционально — удобная админка БД
  adminer:
    image: adminer
    container_name: qgreports-adminer
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8081:8080"
    restart: unless-stopped

volumes:
  pgdata:
